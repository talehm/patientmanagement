{"version":3,"sources":["components/auth/AuthStore.js","actions/Actions.js","actions/type.js","components/auth/SignIn.js","components/dashboard/ListItems.js","components/dashboard/Dashboard.js","components/report/Report.js","components/shared/Table.js","components/shared/FormValidation.js","components/shared/AutoSuggest.js","components/shared/AddNewForm.js","components/record/Records.js","components/patient/PaginationTools.js","components/patient/Patient.js","components/dashboard/Title.js","components/metaData/MetaReport.js","App.js","reducers/patient.js","reducers/index.js","store.js","serviceWorker.js","index.js"],"names":["AuthStore","localStorage","getItem","this","TOKEN_NAME","token","setItem","removeItem","loadPatients","page","pageSize","firstPage","lastPage","dispatch","fetch","method","headers","getBearer","then","res","json","type","payload","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","connect","state","signIn","data","handleErrorResponse","handleSuccessfullResponse","body","JSON","stringify","response","status","saveToken","catch","err","props","classes","initialState","React","useState","setState","newState","prevState","Object","assign","useMergeState","email","password","formData","setFormData","errorMessage","setErrorMessage","handleChangeValue","select","value","console","log","error","isLoggedIn","history","push","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","noValidate","TextField","required","fullWidth","id","label","name","autoComplete","autoFocus","onChange","e","target","style","color","Button","onClick","withRouter","ListItem","button","ListItemIcon","ListItemText","primary","root","toolbar","paddingRight","toolbarIcon","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","fixedHeight","open","setOpen","useEffect","AppBar","clsx","Toolbar","IconButton","edge","aria-label","noWrap","startIcon","removeToken","Drawer","Divider","List","Grid","item","lg","children","background","textAlign","text","nested","paddingLeft","report","patient","getReport","result","match","params","patients","fifthRecord","justify","Paper","elevation","entries","map","key","role","undefined","dense","textTransform","replace","ListItemSecondaryAction","handleClick","Collapse","in","timeout","unmountOnExit","Array","isArray","disablePadding","subheader","ListSubheader","i","table","TableBody","TableRow","TableCell","gutterBottom","align","Table","cols","tableIcons","Check","forwardRef","ref","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","columns","icons","options","headerStyle","fontSize","actionsColumnIndex","actions","icon","tooltip","event","rowData","handlegetpatient","Component","styles","bottom","left","FormValidation","checkAlphanumeric","regex1","RegExp","regex2","regex","source","test","checkAlphabetic","checkEmail","checkNumeric","Validate","input","inputRoot","suggestionsContainerOpen","right","suggestion","suggestionsList","listStyleType","inputInput","renderInputComponent","inputProps","inputRef","other","InputProps","node","renderSuggestion","query","isHighlighted","matches","parts","parse","selected","part","fontWeight","highlight","Example","newValue","handleResponse","suggestions","onSuggestionsFetchRequested","fetchPatientNames","onSuggestionsClearRequested","stateSuggestions","getSuggestionValue","getPatientId","PatientId","autosuggestProps","getSuggestions","placeholder","renderSuggestionsContainer","containerProps","square","withStyles","blue","SimpleDialog","onClose","singlePatient","newRecordPatient","setNewRecordPatient","officialId","dateOfBirth","metaData","patientData","setPatientData","patientId","disease","createdAt","Date","bill","description","recordData","setRecordData","handlePatientData","handlePatientMetaData","index","newMetaData","handleRecordData","newRecord","Intl","DateTimeFormat","year","day","month","format","updateRecordList","mode","keys","length","keyValuePair","removeMetaData","splice","Dialog","aria-labelledby","DialogTitle","parseInt","utils","DateFnsUtils","DatePicker","autoOk","disableFuture","openTo","views","size","addNewPatient","updatePatient","AutoSuggest","startAdornment","InputAdornment","multiline","rows","addNewRecord","recordList","loadRecords","AddNewForm","field","patientList","handleArrowBtn","atyel","xs","disabled","InputLabelProps","shrink","helperText","option","MenuItem","Patient","addNew","handleClose","handleGetPatientResponse","handleGetPatient","getPatient","patientlist","md","top","Title","metaStatistics","getMetaStatistics","fixedHeightPaper","PrivateRoute","rest","render","to","pathname","App","path","SignIn","exact","Report","MetaReport","Records","proxyList","test_info","combineReducers","action","concat","store","createStore","Reducer","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.79bce2cd.chunk.js","sourcesContent":["\nclass AuthStore {\n    static TOKEN_NAME = 'token';\n\n    static isLoggedIn() {\n        return localStorage.getItem(this.TOKEN_NAME) !== null;\n    }\n\n    static saveToken(token) {\n        localStorage.setItem(this.TOKEN_NAME, token);\n    }\n\n    static removeToken() {\n        localStorage.removeItem(this.TOKEN_NAME);\n    }\n\n    static getToken() {\n        return localStorage.getItem(this.TOKEN_NAME)\n    }\n\n    static getBearer() {\n        return \"Bearer \" + localStorage.getItem(this.TOKEN_NAME)\n    }\n}\n\nexport default AuthStore;","\r\nimport {\r\n    FETCH_PATIENT_DATA,\r\n    EDIT_SINGLE_PATIENT,\r\n    UPDATE_RECORD_LIST,\r\n    FETCH_RECORD_DATA,\r\n    FETCH_PATIENT_REPORT,\r\n    FETCH_META_STATISTICS\r\n} from \"./type\"\r\nimport AuthStore from '../components/auth/AuthStore'\r\n\r\nexport const loadPatients = (page, pageSize, firstPage, lastPage) => dispatch => {\r\n    fetch('/api/Patients?page=' + page + '&pageSize=' + pageSize + '&firstPage=' + firstPage + '&lastPage=' + lastPage, {\r\n        method: \"GET\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': AuthStore.getBearer()\r\n\r\n        }\r\n\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            dispatch({\r\n                type: FETCH_PATIENT_DATA,\r\n                payload: res\r\n            })\r\n        }\r\n        )\r\n}\r\nexport const loadRecords = () => dispatch => {\r\n    fetch('/api/Records/' , {\r\n        method: \"GET\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': AuthStore.getBearer()\r\n        }\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            dispatch({\r\n                type: FETCH_RECORD_DATA,\r\n                payload: res.result\r\n            })\r\n        })\r\n}\r\n\r\nexport const addNewPatient = (data)=>dispatch => {\r\n    //console.log(\"worked\")\r\n    fetch('/api/Patients', {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': AuthStore.getBearer()\r\n        },\r\n        body: JSON.stringify(data)\r\n\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            dispatch({\r\n                type: FETCH_PATIENT_DATA,\r\n                payload: res\r\n            })\r\n\r\n        }\r\n        )\r\n}\r\n\r\nexport const getPatient = (id) => dispatch => {\r\n    fetch('/api/Patients/' + id, {\r\n        method: \"GET\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': AuthStore.getBearer()\r\n        }\r\n\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => \r\n            dispatch({\r\n                type: EDIT_SINGLE_PATIENT,\r\n                payload: res.result[0]\r\n            })\r\n        )\r\n}\r\n\r\nexport const updatePatient = (id, data) => dispatch => {\r\n    fetch('/api/Patients/'+id, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': AuthStore.getBearer()\r\n        },\r\n        body: JSON.stringify(data)\r\n\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n           \r\n\r\n        }\r\n        )\r\n}\r\n\r\nexport const removeMetaData = (id) =>dispatch=> {\r\n    fetch('/api/MetaDatas/' + id, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': AuthStore.getBearer()\r\n        }\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            console.log(res)\r\n        })\r\n}\r\n\r\n\r\n\r\nexport const fetchPatientNames = (text, handleResponse) => dispatch => {\r\n    console.log(text)\r\n    fetch('/api/Patients/name/' + text, {\r\n        method: \"GET\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': AuthStore.getBearer()\r\n        }\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            console.log(res)\r\n            handleResponse(res.result)\r\n            //console.log(res)\r\n        })\r\n}\r\n\r\nexport const addNewRecord = (data, handleSuccessfullResponse) => dispatch => {\r\n    fetch('/api/Records', {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': AuthStore.getBearer()\r\n        },\r\n        body: JSON.stringify(data)\r\n\r\n    })\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                handleSuccessfullResponse()\r\n\r\n            }\r\n        }\r\n        )\r\n}\r\n\r\nexport const updateRecordList = (newRecord) =>dispatch=> {\r\n    dispatch({\r\n        type: UPDATE_RECORD_LIST,\r\n        payload: newRecord\r\n    })\r\n}\r\n\r\nexport const getReport = (id) => dispatch => {\r\n    console.log(AuthStore.getBearer())\r\n    fetch('/api/Patients/report/'+id, {\r\n        method: \"GET\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': AuthStore.getBearer()\r\n        }\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            console.log(res)\r\n            dispatch({\r\n                type: FETCH_PATIENT_REPORT,\r\n                payload: res.result[0]\r\n            })\r\n        })\r\n\r\n}\r\n\r\nexport const getMetaStatistics = () => dispatch => {\r\n    fetch('api/MetaDatas/statistics/', {\r\n        method: \"GET\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': AuthStore.getBearer()\r\n        }\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => dispatch({\r\n            type: FETCH_META_STATISTICS,\r\n            payload: res\r\n        }))\r\n}\r\n\r\nexport const signIn = (data, handleErrorResponse, handleSuccessfullResponse) => dispatch => {\r\n    fetch('api/Login', {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(response => {\r\n\r\n            const status = response.status;\r\n\r\n            if (status === 200) {\r\n\r\n                return response.json()\r\n            } else {\r\n                throw response;\r\n            }\r\n           \r\n        })\r\n        .then(res => {\r\n            AuthStore.saveToken(res.token)\r\n            handleSuccessfullResponse()\r\n            return res\r\n        })\r\n        .catch(err => {\r\n            try {\r\n                /* If status code is 401 then send message to client that provided data is wrong*/\r\n                if (err.status === 400) {\r\n                    handleErrorResponse(\"Please try again. Credentials are wrong.\")\r\n                    \r\n                }\r\n            }\r\n            catch (err) {\r\n            /* When network error occurs, inform the client */\r\n                handleErrorResponse(\"Netzwerkfehler ist aufgetreten. Bitte �berpr�fen Ihren Server.\")\r\n               \r\n            }\r\n        });\r\n}","export const UPDATE_SAMPLE_DATA = 'UPDATE_SAMPLE_DATA'\nexport const TEST_URL_INFO = 'TEST_URL_INFO'\nexport const FETCH_PATIENT_DATA = 'FETCH_PATIENT_DATA'\nexport const EDIT_SINGLE_PATIENT = 'EDIT_SINGLE_PATIENT'\nexport const FETCH_RECORD_DATA = 'FETCH_RECORD_DATA'\nexport const UPDATE_RECORD_LIST = 'UPDATE_RECORD_LIST'\nexport const FETCH_PATIENT_REPORT = 'FETCH_PATIENT_REPORT'\nexport const FETCH_META_STATISTICS ='FETCH_META_STATISTICS'","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { connect } from \"react-redux\"\r\nimport { signIn } from '../../actions/Actions'\r\nimport AuthStore from './AuthStore'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\nfunction useMergeState(initialState) {\r\n    const [state, setState] = React.useState(initialState);\r\n    const setMergedState = newState =>\r\n        setState(prevState => Object.assign({}, prevState, newState)\r\n        );\r\n    return [state, setMergedState];\r\n}\r\nfunction SignIn(props) {\r\n    const classes = useStyles();\r\n    var [formData, setFormData] = useMergeState({\r\n        email: '',\r\n        password: ''\r\n    });\r\n    const [errorMessage, setErrorMessage] = React.useState(null);\r\n    const handleChangeValue = (select, value) => {\r\n        console.log(select, value)\r\n        setFormData({ [select]: value });\r\n    }\r\n\r\n    const handleErrorResponse = (error) => {\r\n        console.log(error)\r\n        setErrorMessage(error)\r\n    }\r\n    const handleSuccessfullResponse = () => {\r\n        if (AuthStore.isLoggedIn()) {\r\n            props.history.push(\"/\")\r\n        }\r\n    }\r\n    const signIn = () => {\r\n        props.signIn(formData, handleErrorResponse, handleSuccessfullResponse)\r\n    }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n                      variant=\"outlined\"\r\n                      margin=\"normal\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email Address\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      autoFocus\r\n                      onChange={(e)=>handleChangeValue('email',e.target.value )}\r\n          />\r\n          <TextField\r\n                      variant=\"outlined\"\r\n                      margin=\"normal\"\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                      onChange={(e) => handleChangeValue('password', e.target.value)}\r\n                  />\r\n                  <p style={{color:\"red\"}}>  {errorMessage}    </p>\r\n          <Button\r\n                      \r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.submit}\r\n                      onClick={signIn}\r\n          >\r\n            Sign In\r\n          </Button>\r\n         \r\n        </form>\r\n      </div>\r\n\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n})\r\n\r\nexport default (connect(mapStateToProps,{ signIn})(SignIn));","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport { withRouter} from \"react-router-dom\";\r\n\r\nfunction ListItems(props) {\r\n        return (\r\n            <div>\r\n                <ListItem button onClick={() => props.history.push(\"/\")}>\r\n                    <ListItemIcon>\r\n                        <PeopleIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Patients\" />\r\n                </ListItem>\r\n                <ListItem button onClick={()=>props.history.push(\"/records\")}>\r\n                    <ListItemIcon>\r\n                        <BarChartIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Records\" />\r\n                </ListItem>\r\n                <ListItem button onClick={() => props.history.push(\"/meta_report\")}>\r\n                    <ListItemIcon>\r\n                        <AssignmentIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Meta Data Statistics\" />\r\n                </ListItem>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    export default withRouter(ListItems);\r\n\r\n","import React, { useEffect} from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Login from '@material-ui/icons/ExitToApp';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ListItems from './ListItems';\r\nimport { withRouter } from 'react-router-dom';\r\nimport AuthStore from '../auth/AuthStore'\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\n function Dashboard(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!AuthStore.isLoggedIn){\r\n            props.history.push(\"/login\")\r\n        }\r\n    }, [])\r\n    const logOut = () => {\r\n        AuthStore.removeToken()\r\n        props.history.push(\"/login\")\r\n    }\r\n    \r\n            return (\r\n                \r\n                <div className={classes.root}>\r\n                    <CssBaseline />\r\n                    <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                        <Toolbar className={classes.toolbar}>\r\n                            <IconButton\r\n                                edge=\"start\"\r\n                                color=\"inherit\"\r\n                                aria-label=\"open drawer\"\r\n                                onClick={handleDrawerOpen}\r\n                                className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                            >\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n                            <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                                Patient Management System\r\n          </Typography>\r\n                            {AuthStore.isLoggedIn() ? <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className={classes.button}\r\n                                startIcon={<Login />}\r\n                                onClick={logOut}\r\n                            >\r\n                                Logout\r\n                    </Button> : null\r\n                            }\r\n\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <Drawer\r\n                        variant=\"permanent\"\r\n                        classes={{\r\n                            paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                        }}\r\n                        open={open}\r\n                    >\r\n                        <div className={classes.toolbarIcon}>\r\n                            <IconButton onClick={handleDrawerClose}>\r\n                                <ChevronLeftIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                        <Divider />\r\n                        <List><ListItems /></List>\r\n\r\n                    </Drawer>\r\n                    <main className={classes.content}>\r\n                        <div className={classes.appBarSpacer} />\r\n                        <Container maxWidth=\"lg\" className={classes.container}>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item lg={12}>\r\n\r\n                                        {props.children}\r\n                                </Grid>\r\n                                {/* Recent Deposits */}\r\n\r\n\r\n\r\n                            </Grid>\r\n\r\n                        </Container>\r\n                    </main>\r\n                </div>\r\n            );\r\n  \r\n}\r\nexport default withRouter(Dashboard)","import React, { useEffect, Fragment } from 'react';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { getReport } from '../../actions/Actions'\r\nimport { connect } from \"react-redux\"\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Dashboard from '../dashboard/Dashboard';\r\nimport Loader from 'react-loader-spinner'\r\n\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        \r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'left',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    nested: {\r\n        paddingLeft: theme.spacing(4),\r\n    },\r\n}));\r\n\r\n\r\nfunction useMergeState(initialState) {\r\n    const [state, setState] = React.useState(initialState);\r\n    const setMergedState = newState =>\r\n        setState(prevState => Object.assign({}, prevState, newState)\r\n        );\r\n    return [state, setMergedState];\r\n}\r\n\r\nfunction Report(props) {\r\n    const {report}=props\r\n    useEffect(() => {\r\n        const id = props.match.params.id\r\n        console.log(id)\r\n        props.getReport(id)\r\n    }, [props.match.params.id]);\r\n\r\n    var [open, setOpen] = useMergeState({\r\n        patients: false,\r\n        fifthRecord: false,\r\n       \r\n    });\r\n    const handleClick = (key) => {\r\n        setOpen({\r\n            [key]:!open[key],\r\n        });\r\n    };\r\n    const classes = useStyles();\r\n        \r\n    if (report != null) {\r\n        return (\r\n            <Dashboard>\r\n            <Grid container justify=\"center\" alignItems=\"center\" style={{ height:\"100%\" }}>\r\n                <Grid item lg={6}>\r\n                    <Paper elevation={3}>\r\n                        <List className={classes.root}>\r\n                            {Object.entries(report).map(([key, value]) =>\r\n                                typeof (value) != 'object' || value === null ?\r\n                                    <ListItem key={key} role={undefined} dense button >\r\n                                        <ListItemText primary={<Typography variant=\"h5\" component=\"h4\" style={{ textTransform: 'capitalize' }} >{key.replace(/([a-z])([A-Z])/g, '$1 $2')}</Typography>} />\r\n                                        <ListItemSecondaryAction >{<Typography variant=\"h5\" component=\"h4\" style={{ textTransform: 'capitalize' }} >{value}</Typography>}</ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                    :\r\n                                    <Fragment key={key}>\r\n                                    <ListItem onClick={() => handleClick(key)} dense  button>\r\n                                            <ListItemText primary={<Typography variant=\"h5\" component=\"h4\" style={{ textTransform: 'capitalize' }} >{key.replace(/([a-z])([A-Z])/g, '$1 $2')}</Typography>} />\r\n                                        <ListItemSecondaryAction >{\r\n                                            open[key] ? <ExpandLess  /> : <ExpandMore  />\r\n                                        }</ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                        <Collapse in={open[key]} timeout=\"auto\" unmountOnExit>\r\n                                            <Grid container justify=\"center\" style={{backgroundColor:\"#f2f2f2\"}} >\r\n                                                <Grid item lg={8}>\r\n                                                    {Array.isArray(value) ?\r\n                                                        <List component=\"div\" disablePadding\r\n                                                            subheader={\r\n                                                                <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n                                                                   Patient List with Similar Diseases\r\n                                                                </ListSubheader>\r\n                                                            }\r\n                                                        >\r\n                                                            {value.map((value, i) => (\r\n                                                                <ListItem button key={i} className={classes.nested} onClick={() => props.history.push(\"/report/\" + value.id)}>\r\n                                                                    <ListItemText primary={value.name} />\r\n                                                                </ListItem>\r\n                                                            ))}\r\n                                                            </List>\r\n                                                        :\r\n                                                        <Table className={classes.table} aria-label=\"simple table\">\r\n                                                            <TableBody>\r\n                                                                {Object.entries(value).map(([key, value]) => (\r\n                                                                    <TableRow key={key}>\r\n                                                                        <TableCell component=\"th\" >\r\n                                                                            <Typography variant=\"h6\" gutterBottom style={{ textTransform: 'capitalize' }}   >{key.replace(/([a-z])([A-Z])/g, '$1 $2')}</Typography>\r\n                                                                        </TableCell>\r\n                                                                        <TableCell align=\"right\">\r\n                                                                            <Typography variant=\"subtitle1\" >{value}</Typography>\r\n                                                                        </TableCell>\r\n                                                                    </TableRow>\r\n                                                                ))}\r\n                                                            </TableBody>\r\n                                                        </Table>\r\n                                                    }   \r\n                                                \r\n                                                    </Grid></Grid>\r\n                                        </Collapse>\r\n                            </Fragment>\r\n                            )}\r\n                        </List>\r\n                    </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Dashboard>\r\n            \r\n        )\r\n    }\r\n    else {\r\n        return (<Dashboard><Loader\r\n            style={{ marginTop: 50 }}\r\n            type=\"Bars\"\r\n            color=\"#00BFFF\"\r\n            height={50}\r\n            width={50}\r\n            timeout={0} //3 secs\r\n\r\n        /></Dashboard>)\r\n    }\r\n    \r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    report: state.patient.report\r\n})\r\n\r\n\r\nexport default (connect(mapStateToProps, { getReport })(Report));\r\n","import React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { forwardRef } from 'react';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Table extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {cols,data}=this.props\r\n        const tableIcons = {\r\n            Check: forwardRef((props, ref) => <Check {...this.props} ref={ref} />),\r\n            Clear: forwardRef((props, ref) => <Clear {...this.props} ref={ref} />),\r\n            Delete: forwardRef((props, ref) => <DeleteOutline {...this.props} ref={ref} />),\r\n            DetailPanel: forwardRef((props, ref) => <ChevronRight {...this.props} ref={ref} />),\r\n            Edit: forwardRef((props, ref) => <EditIcon {...this.props} ref={ref} />),\r\n            Export: forwardRef((props, ref) => <SaveAlt {...this.props} ref={ref} />),\r\n            Filter: forwardRef((props, ref) => <FilterList {...this.props} ref={ref} />),\r\n            FirstPage: forwardRef((props, ref) => <FirstPage {...this.props} ref={ref} />),\r\n            LastPage: forwardRef((props, ref) => <LastPage {...this.props} ref={ref} />),\r\n            NextPage: forwardRef((props, ref) => <ChevronRight {...this.props} ref={ref} />),\r\n            PreviousPage: forwardRef((props, ref) => <ChevronLeft {...this.props} ref={ref} />),\r\n            ResetSearch: forwardRef((props, ref) => <Clear {...this.props} ref={ref} />),\r\n            Search: forwardRef((props, ref) => <Search {...this.props} ref={ref} />),\r\n            SortArrow: forwardRef((props, ref) => <ArrowUpward {...this.props} ref={ref} />),\r\n            ThirdStateCheck: forwardRef((props, ref) => <Remove {...this.props} ref={ref} />),\r\n            ViewColumn: forwardRef((props, ref) => <ViewColumn {...this.props} ref={ref} />)\r\n        };\r\n        \r\n        return (\r\n            <MaterialTable\r\n                title=\"\"\r\n                columns={cols}\r\n                data={data}\r\n                icons={tableIcons}\r\n                options={{\r\n                    headerStyle: {\r\n                        backgroundColor: '#f2f2f2',\r\n                        color: '#4d4d4d',\r\n                        fontSize: 16\r\n                    },\r\n                    actionsColumnIndex: -1\r\n                }}\r\n                actions={this.props.actions ? [\r\n                    {\r\n                        icon: () => <DescriptionIcon />,\r\n                        tooltip: 'Save User',\r\n                        onClick: (event, rowData) => this.props.getReport(rowData.id)\r\n                    },\r\n                    {\r\n                        icon: () => <EditIcon />,\r\n                        tooltip: 'Edit Patient',\r\n                        onClick: (event, rowData) => this.props.handlegetpatient(rowData.id)\r\n                    },\r\n\r\n                ] : undefined}\r\n            />\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Table;","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nconst styles = {\n    formError: {\n        fontSize: 14, color: 'red', position: 'absolute', bottom: '-10px', left: 16, \n    },\n}\nfunction FormValidation(props) {\n  const { value } = props.data;\n \n\n\n\n  function checkAlphanumeric() {\n    var regex1 = new RegExp(\"^([a-zA-Z0-9 ]+$)([^s]*)$\")\n    var regex2 = new RegExp(\"^[0-9]*$\")\n    var regex = new RegExp(regex1.source + \"|\" + regex2.source)\n\n    new RegExp()\n    if (!regex.test(value)) {\n      return \"This field only accepts letters and numbers\"\n    }\n    else {\n      return false\n    }\n  }\n  function checkAlphabetic() {\n      var regex = new RegExp(\"^$|^[a-zA-Z][a-zA-Z\\\\s]+$\")\n    if (!regex.test(value)) {\n      return \"This field only accepts letters\"\n    }\n    else {\n      return false\n    }\n  }\n  function checkEmail() {\n      var regex = new RegExp(\"^^$|^.*@.*\\..*$\")\n    if (!regex.test(value)) {\n\n      return \"Email format is wrong\"\n    } else {\n      return false\n    }\n  }\n\n  function checkNumeric() {\n      var regex = new RegExp(\"^$|^[0-9]+$\")\n    if (!regex.test(value)) {\n      return \"This field only accepts digits\"\n    }\n    else {\n      return false\n    }\n  }\n\n\n  function Validate() {\n      const { type, value } = props.data;\n      if (typeof value !== 'undefined') {\n          switch (type) {\n              case 'text':\n                  return checkAlphabetic()\n              case 'numeric':\n                  return checkNumeric();\n\n              case 'email':\n                  return checkEmail()\n\n              case 'alphanumeric':\n                  return checkAlphanumeric()\n              default: break;\n          }\n    }\n  }\n  var className = styles.formError\n  var content = Validate()\n \n  return (\n    <span style={className} >{content}</span>\n  )\n}\n\n\n\nexport default FormValidation\n","import Autosuggest from 'react-autosuggest';\r\nimport React  from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport {  withStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport { fetchPatientNames } from '../../actions/Actions';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport match from 'autosuggest-highlight/match';\r\nimport parse from 'autosuggest-highlight/parse';\r\n// Imagine you have a list of languages that you'd like to autosuggest.\r\n\r\nconst styles ={\r\n\r\n \r\n    input: {width:\"100%\"},\r\n    inputRoot: {\r\n        color: 'inherit',\r\n        \r\n    },\r\n    container: {\r\n        width:\"100%\",\r\n        position: \"relative\",\r\n        \r\n    },\r\n    suggestionsContainerOpen: {\r\n        position: \"absolute\",\r\n        zIndex: 1000,\r\n        left: 0,\r\n        right: 0\r\n    },\r\n    suggestion: {\r\n        display: \"block\"\r\n    },\r\n    suggestionsList: {\r\n        margin: 0,\r\n        padding: 0,\r\n        listStyleType: \"none\"\r\n    },\r\n    inputInput: {\r\n        width: '100%',\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n};\r\n\r\n\r\n    \r\n\r\n// When suggestion is clicked, Autosuggest needs to populate the input\r\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n// input value for every given suggestion.\r\n//const getSuggestionValue = suggestion => suggestion.name;\r\n//console.log(getSuggestionValue)\r\n// Use your imagination to render suggestions.\r\n\r\n\r\nfunction renderInputComponent(inputProps) {\r\n    const { classes, inputRef = () => { }, ref, ...other } = inputProps;\r\n\r\n    return (\r\n        <TextField\r\n            fullWidth\r\n            id=\"outlined-dense\"\r\n            margin=\"dense\"\r\n            className=\"autoSuggest\"\r\n            style={{ backgroundColor: 'white' }}\r\n           \r\n            InputProps={{\r\n                inputRef: node => {\r\n                    ref(node);\r\n                    inputRef(node);\r\n                },\r\n                classes: {\r\n                    input: styles.input\r\n                }\r\n            }}\r\n            {...other}\r\n        />\r\n    );\r\n}\r\n\r\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\r\n    const matches = match(suggestion.name, query);\r\n    const parts = parse(suggestion.name, matches);\r\n    return (\r\n        <ListItem selected={isHighlighted} component=\"div\">\r\n            <ListItemText\r\n                primary={\r\n                    parts.map(part => (\r\n\r\n                        <span key={part.text} style={{ fontWeight: part.highlight ? 500 : 400 }}>\r\n                            {part.text}\r\n                        </span>\r\n                    ))\r\n                }\r\n            />\r\n        </ListItem>\r\n    );\r\n}\r\n\r\nclass Example extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        // Autosuggest is a controlled component.\r\n        // This means that you need to provide an input value\r\n        // and an onChange handler that updates this value (see below).\r\n        // Suggestions also need to be provided to the Autosuggest,\r\n        // and they are initially empty because the Autosuggest is closed.\r\n        this.state = {\r\n            value: '',\r\n            patient:'',\r\n            suggestions: [],\r\n            stateSuggestions: [],\r\n\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        /*try {\r\n            this.props.fetchPatientNames();\r\n        }\r\n        catch (error) {\r\n            this.props.handleActionStatus({ snackbar: true, variant: \"error\", message: \"Ein fehler ist aufgetreten: \" + error })\r\n        }*/\r\n    }\r\n     \r\n    onChange = (event, { newValue }) => {\r\n        this.setState({\r\n            value: newValue\r\n        });\r\n        \r\n    };\r\n    handleResponse = (response) => {\r\n        this.setState({\r\n            suggestions:response\r\n        });\r\n    }\r\n    // Autosuggest will call this function every time you need to update suggestions.\r\n    // You already implemented this logic above, so just use it.\r\n    onSuggestionsFetchRequested = ({ value }) => {\r\n        console.log(value)\r\n        this.props.fetchPatientNames(value, this.handleResponse)\r\n        /*this.setState({\r\n            suggestions: getSuggestions(value)\r\n        });*/\r\n    };\r\n\r\n    // Autosuggest will call this function every time you need to clear suggestions.\r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n            suggestions: []\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {  suggestions, stateSuggestions,patient } = this.state;\r\n        const { classes } = this.props;\r\n\r\n        const getSuggestionValue = (suggestion) => {\r\n            console.log(suggestion)\r\n            if (suggestion.name) {\r\n                this.props.getPatientId(suggestion);\r\n                this.setState({ PatientId: suggestion.id })\r\n            }\r\n            return suggestion.name;\r\n        }\r\n\r\n        const handleSuggestionsFetchRequested = ({ value }) => {\r\n            this.setState({ stateSuggestions: this.getSuggestions(value) });\r\n        };\r\n\r\n        const handleSuggestionsClearRequested = () => {\r\n            this.setState({ stateSuggestions: [] })\r\n        };\r\n        const handleChange = name => (event, { newValue }) => {\r\n            console.log(name)\r\n            this.setState({\r\n                [name]: newValue\r\n            });\r\n\r\n        };\r\n        // Finally, render it!\r\n        const autosuggestProps = {\r\n            renderInputComponent,\r\n            suggestions: stateSuggestions,\r\n            onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\r\n            onSuggestionsClearRequested: handleSuggestionsClearRequested,\r\n            getSuggestionValue,\r\n            renderSuggestion,\r\n        };\r\n\r\n        return (\r\n            <Autosuggest\r\n                {...autosuggestProps}\r\n                suggestions={suggestions}\r\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                getSuggestionValue={getSuggestionValue}\r\n                renderSuggestion={renderSuggestion}\r\n                //inputProps={inputProps}\r\n                inputProps={{\r\n                    classes, id: 5, placeholder: \"Select Patient\",\r\n                    value: patient, onChange: handleChange(\"patient\")\r\n                }}\r\n                theme={styles}\r\n                renderSuggestionsContainer={options => (\r\n                    <Paper {...options.containerProps} square>\r\n                        {options.children}\r\n                    </Paper>\r\n                )}\r\n            />\r\n        );\r\n    }\r\n}\r\nExample.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    tenant_names: PropTypes.array.isRequired,\r\n};\r\nconst mapStateToProps = state => ({\r\n    //tenant_names: state.patient.tenant_names,\r\n});\r\nexport default withStyles(styles)(connect(mapStateToProps, { fetchPatientNames })(Example));\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport FormValidation from './FormValidation'\r\nimport RemoveIcon from '@material-ui/icons/HighlightOff'\r\nimport { blue } from '@material-ui/core/colors';\r\nimport { connect } from \"react-redux\"\r\nimport 'react-day-picker/lib/style.css';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport EuroIcon from '@material-ui/icons/Euro';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { addNewPatient, updatePatient, removeMetaData, addNewRecord, updateRecordList } from '../../actions/Actions'\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport AutoSuggest from '../shared/AutoSuggest'\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        backgroundColor: blue[100],\r\n        color: blue[600],\r\n    },\r\n});\r\n\r\n\r\nfunction useMergeState(initialState) {\r\n    const [state, setState] = React.useState(initialState);\r\n    const setMergedState = newState =>\r\n        setState(prevState => Object.assign({}, prevState, newState)\r\n        );\r\n    return [state, setMergedState];\r\n}\r\n\r\nfunction SimpleDialog(props) {\r\n    const classes = useStyles();\r\n\r\n    const { onClose, open, type, singlePatient } = props;\r\n    const [newRecordPatient, setNewRecordPatient] = React.useState(null);\r\n\r\n    var [patientData, setPatientData] = useMergeState({\r\n        name: '',\r\n        officialId: '',\r\n        dateOfBirth: null,\r\n        email: '',\r\n        metaData: []\r\n    });\r\n    const [recordData, setRecordData] = useMergeState({\r\n        patientId: '',\r\n        disease: '',\r\n        createdAt: new Date(),\r\n        bill: '',\r\n        description: ''\r\n    });\r\n\r\n\r\n\r\n    const handlePatientData = (select, value) => {\r\n        setPatientData({ [select]: value })\r\n    }\r\n    const handlePatientMetaData = (select, index, event) => {\r\n        let newMetaData = patientData.metaData\r\n        newMetaData[index] = { ...newMetaData[index], [select]: event.target.value }\r\n        setPatientData({ metaData: newMetaData })\r\n    }\r\n    const handleRecordData = (select, value) => {\r\n        setRecordData({ [select]: value })\r\n\r\n    }\r\n    const getPatientId = (patient) => {\r\n        setNewRecordPatient(patient)\r\n        setRecordData({ patientId: patient.id })\r\n    }\r\n\r\n\r\n    const handleDateOfBirth = (value) => {\r\n        setPatientData({ dateOfBirth: value })\r\n    }\r\n\r\n    const handleEntryDate = (value) => {\r\n        setRecordData({ createdAt: value })\r\n    }\r\n    const handleSuccessfullResponse = () => {\r\n        const newRecord = {\r\n            name: newRecordPatient.name,\r\n            disease: recordData.disease,\r\n            createdAt: Intl.DateTimeFormat(\"en-US\", {\r\n                year: \"numeric\",\r\n                day: \"2-digit\",\r\n                month: \"long\"\r\n\r\n            }).format(recordData.createdAt)\r\n\r\n\r\n\r\n        }\r\n        props.updateRecordList(newRecord)\r\n    }\r\n    const submitNewRecord = () => {\r\n        props.addNewRecord(recordData, handleSuccessfullResponse)\r\n        onClose()\r\n    }\r\n    const submitNewPatient = () => {\r\n        props.addNewPatient(patientData)\r\n        onClose()\r\n    }\r\n    const updatePatient = () => {\r\n        props.updatePatient(singlePatient.id, patientData)\r\n        onClose()\r\n\r\n    }\r\n    const addNewMetaData = () => {\r\n        setPatientData({\r\n            metaData: [...patientData.metaData, { key: '', value: '' }]\r\n        })\r\n    }\r\n    const removeMetaData = (index) => {\r\n        if (patientData.metaData[index].id) {\r\n            props.removeMetaData(patientData.metaData[index].id)\r\n        }\r\n        patientData.metaData.splice(index, 1)\r\n        setPatientData({ metaData: patientData.metaData })\r\n    }\r\n    useEffect(() => {\r\n        const { mode, singlePatient } = props\r\n        console.log(singlePatient)\r\n        if (mode === 'update' && Object.keys(singlePatient).length>0) {\r\n            setPatientData({\r\n                name: singlePatient.name,\r\n                officialId: singlePatient.officialId,\r\n                dateOfBirth: singlePatient.dateOfBirth,\r\n                email: singlePatient.email,\r\n                metaData: singlePatient.metaData\r\n            })\r\n        }\r\n        // Update the document title using the browser API\r\n    }, [singlePatient]);\r\n    console.log(patientData)\r\n    const keyValuePair = patientData.metaData.length > 0 ? patientData.metaData.map((data, index) =>\r\n        <ListItem button >\r\n            <TextField id=\"outlined-basic\" value={patientData.metaData[index].key} onChange={event => handlePatientMetaData('key', index, event)} fullWidth label=\"Key\" variant=\"outlined\" />\r\n            <TextField id=\"outlined-basic\" value={patientData.metaData[index].value} onChange={event => handlePatientMetaData('value', index, event)} fullWidth label=\"Value\" variant=\"outlined\" />\r\n            <Button onClick={() => removeMetaData(index)}><RemoveIcon /></Button>\r\n        </ListItem>\r\n    )\r\n        :\r\n        null\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"simple-dialog-title\" open={open} >\r\n            <DialogTitle id=\"simple-dialog-title\">Add New {type}</DialogTitle>\r\n            <>\r\n                {props.type === \"patient\" ?\r\n                    <List style={{ width: 400 }}>\r\n                        <ListItem button >\r\n                            <TextField id=\"outlined-basic\" value={patientData.name} onChange={e => handlePatientData('name', e.target.value)} fullWidth label=\"Patient Name\" />\r\n                            <FormValidation data={{ value: patientData.name, type: 'text' }} />\r\n                        </ListItem>\r\n                        <ListItem button >\r\n                            <TextField id=\"outlined-basic\" value={patientData.officialId} onChange={e => handlePatientData('officialId', parseInt(e.target.value))} fullWidth label=\"Official Id\" />\r\n                            <FormValidation data={{ value: patientData.officialId, type: 'numeric' }} />\r\n                        </ListItem>\r\n                        <ListItem button >\r\n                            <MuiPickersUtilsProvider className=\"muiUtils\" utils={DateFnsUtils}>\r\n                                <DatePicker\r\n                                    fullWidth\r\n                                    autoOk\r\n                                    disableFuture\r\n                                    openTo=\"year\"\r\n                                    format=\"dd/MM/yyyy\"\r\n                                    label=\"Date of birth\"\r\n                                    views={[\"year\", \"month\", \"date\"]}\r\n                                    value={patientData.dateOfBirth}\r\n                                    onChange={handleDateOfBirth}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                            <TextField id=\"outlined-basic\" value={patientData.email} onChange={e => handlePatientData('email', e.target.value)} fullWidth label=\"Email Address\" />\r\n                            <FormValidation data={{ value: patientData.email, type: 'email' }} />\r\n                        </ListItem>\r\n                        {keyValuePair}\r\n\r\n                        <ListItem button style={{ marginTop: 10 }}>\r\n                            <Grid container justify=\"center\">\r\n                                <Grid item>\r\n                                    <Button\r\n                                        onClick={addNewMetaData}\r\n                                        variant=\"contained\"\r\n                                        color=\"default\"\r\n                                        \r\n                                        startIcon={<AddIcon />}\r\n                                        size=\"small\"\r\n                                    >\r\n                                        Add New Meta Data\r\n                            </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </ListItem>\r\n                        <ListItem button style={{ marginTop: 10 }}>\r\n                            <Grid container justify=\"center\">\r\n                                <Grid item>\r\n                                    {props.mode === 'create' ? <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={submitNewPatient}> Submit</Button>\r\n                                        : <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={updatePatient}> Update</Button>}\r\n                                </Grid></Grid>\r\n                        </ListItem>\r\n                    </List>\r\n                    :\r\n                    <List style={{ width: 400 }}>\r\n                        <ListItem button>\r\n                            <AutoSuggest getPatientId={(patient) => getPatientId(patient)} />\r\n                        </ListItem>\r\n\r\n                        <ListItem button >\r\n                            <TextField margin=\"dense\" id=\"outlined-basic\" value={recordData.disease} onChange={e => handleRecordData('disease', e.target.value)} fullWidth label=\"Disease Name\" />\r\n                            <FormValidation data={{ value: recordData.disease, type: 'alphanumeric' }} />\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                            <MuiPickersUtilsProvider className=\"muiUtils\" utils={DateFnsUtils}>\r\n                                <DatePicker\r\n                                    fullWidth\r\n                                    autoOk\r\n                                    disableFuture\r\n                                    openTo=\"year\"\r\n                                    format=\"dd/MM/yyyy\"\r\n                                    label=\"Time of Entry\"\r\n                                    views={[\"year\", \"month\", \"date\"]}\r\n                                    value={recordData.createdAt}\r\n                                    onChange={handleEntryDate}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </ListItem>\r\n\r\n                        <ListItem button >\r\n                            <TextField\r\n                                margin=\"dense\"\r\n                                value={recordData.bill}\r\n                                onChange={e => handleRecordData('bill', parseInt(e.target.value))}\r\n                                \r\n                                id=\"input-with-icon-textfield\"\r\n                                label=\"Bill\"\r\n                                fullWidth\r\n\r\n                                InputProps={{\r\n                                    startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <EuroIcon />\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                            <FormValidation data={{ value: recordData.bill, type: 'numeric' }} />\r\n\r\n                        </ListItem>\r\n                        <ListItem button >\r\n                            <TextField\r\n                                margin=\"dense\"\r\n                                value={recordData.description}\r\n                                onChange={e => handleRecordData('description', e.target.value)}\r\n                                fullWidth\r\n                                id=\"outlined-multiline-static\"\r\n                                label=\"Description\"\r\n                                multiline\r\n                                rows={4}\r\n\r\n                            />\r\n\r\n                        </ListItem>\r\n\r\n                        <ListItem button style={{ marginTop: 10 }}>\r\n                            <Grid container justify=\"center\">\r\n                                <Grid item>\r\n                                    <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={submitNewRecord}> Submit</Button>\r\n                                </Grid></Grid>\r\n                        </ListItem>\r\n                    </List>\r\n                }\r\n\r\n            </>\r\n\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nSimpleDialog.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n};\r\n\r\nfunction SimpleDialogDemo(props) {\r\n    return (\r\n        <div>\r\n            <SimpleDialog data={props.data} open={props.open} type={props.type} onClose={props.onClose} {...props} />\r\n        </div>\r\n    );\r\n\r\n}\r\nconst mapStateToProps = state => ({\r\n    singlePatient: state.patient.singlePatient\r\n})\r\n\r\nexport default (connect(mapStateToProps, { addNewPatient, updatePatient, removeMetaData, updateRecordList, addNewRecord })(SimpleDialogDemo));","import React, { useEffect } from 'react';\r\nimport Table from \"../shared/Table\"\r\nimport AddNewForm from \"../shared/AddNewForm\"\r\nimport { loadRecords } from '../../actions/Actions'\r\nimport Button from '@material-ui/core/Button'\r\nimport PlusIcon from '@material-ui/icons/Add';\r\nimport { connect } from \"react-redux\"\r\nimport Dashboard from '../dashboard/Dashboard';\r\n\r\n\r\nfunction Records(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const addNew = (type) => {\r\n        setOpen(true)\r\n    }      \r\n    useEffect(() => {  \r\n        props.loadRecords();\r\n    }, []);\r\n    const tableCols = [\r\n        { title: 'Patient Name', field: 'name' },\r\n        { title: 'Disease', field: 'disease' },\r\n        { title: 'Entry Date', field: 'createdAt' },\r\n    ];\r\n    return (\r\n        <Dashboard>\r\n            <AddNewForm open={open} onClose={handleClose} type=\"record\" />\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                startIcon={<PlusIcon />}\r\n                onClick={() => addNew(\"record\")}\r\n                size=\"small\"\r\n            >\r\n                New Record\r\n                     </Button>\r\n            <Table cols={tableCols} data={props.recordList} actions={false}  />\r\n        </Dashboard>\r\n        )\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    recordList: state.patient.recordList\r\n})\r\n\r\nexport default (connect(mapStateToProps, { loadRecords })(Records));","import React, { useEffect} from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { connect } from \"react-redux\"\r\nimport { loadPatients } from '../../actions/Actions'\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nfunction PaginationTools(props) {\r\n    //const [pageSize, setPageSize] = React.useState(10)\r\n    var { page, pageSize } = props\r\n    page=page === undefined ? 1 : page\r\n    pageSize = pageSize === undefined ? 10 : pageSize\r\n    //const [page, setPage] = React.useState(1)\r\n  \r\n    const handleChangePageSize = (e) => {\r\n        //setPageSize(e.target.value)\r\n        props.loadPatients(props.page,e.target.value, false, false)\r\n    }\r\n    const handleChangePage = (e) => {\r\n        props.loadPatients(e.target.value, pageSize, false, false)\r\n\r\n    }\r\n    const handleArrowBtn = (page,firstPage, lastPage) => {\r\n        console.log(props.page)\r\n        props.loadPatients(page, pageSize, firstPage, lastPage)\r\n    }\r\n    useEffect(() => {\r\n        props.loadPatients(page, pageSize, false, false)\r\n    }, [page, pageSize,props]);\r\n    return (\r\n        \r\n        <Paper variant=\"outlined\" atyel={{backgroundColor:\"gray\"}}>\r\n            <Grid container justify=\"center\" alignItems=\"center\">\r\n                <Grid item xs={2}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => handleArrowBtn(1, true, false)} disabled={page<=1? true : false}>\r\n                        <FirstPageIcon/>\r\n                    </Button>{' '}\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => handleArrowBtn(page - 1, false, false)} disabled={page <= 1 ? true : false} >\r\n                        <ArrowBackIosIcon/>\r\n                    </Button>{' '}\r\n                </Grid>\r\n               \r\n                <Grid item xs={3}>\r\n                    <TextField\r\n                        id=\"standard-number\"\r\n                        type=\"number\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        value={page}\r\n                        onChange={handleChangePage}\r\n                        style={{ width: 100, padding:\"0 20px\" }}\r\n                        helperText=\"Page\"\r\n\r\n\r\n                    />\r\n                    <TextField\r\n                        id=\"standard-select-currency\"\r\n                        select\r\n                        value={pageSize}\r\n                        onChange={handleChangePageSize}\r\n                        helperText=\"PageSize\"\r\n                        style={{ width: 100, }}\r\n                    >\r\n                        {[2,10, 20, 30, 40, 50].map((option) => (\r\n                            <MenuItem key={option} value={option}>\r\n                                {option}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                </Grid>\r\n                <Grid item xs={2} >\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => handleArrowBtn(page + 1, false, false)}>\r\n                        <ArrowForwardIosIcon/>\r\n                    </Button>{' '}\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => handleArrowBtn(page, false, true)}>  \r\n                        <LastPageIcon/>\r\n                    </Button>{' '}\r\n                </Grid>\r\n                </Grid>\r\n            </Paper>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    page: state.patient.patientList.page,\r\n    pageSize: state.patient.patientList.pageSize\r\n})\r\n\r\nexport default (connect(mapStateToProps, { loadPatients })(PaginationTools));","import React, { Component } from 'react';\r\nimport Table from \"../shared/Table\"\r\nimport AddNewForm from \"../shared/AddNewForm\"\r\nimport { loadPatients, getPatient } from '../../actions/Actions'\r\nimport PaginationTools from './PaginationTools'\r\nimport { connect } from \"react-redux\"\r\nimport Button from '@material-ui/core/Button'\r\nimport PlusIcon from '@material-ui/icons/Add';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Loader from 'react-loader-spinner'\r\nimport Dashboard from '../dashboard/Dashboard';\r\n\r\nclass Patient extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false\r\n        }\r\n    }\r\n    getReport = (id) => {\r\n        this.props.history.push(\"/report/\" + id)\r\n    }\r\n    addNew = (type) => {\r\n        this.setState({ open: true })\r\n        this.setState({ mode: 'create' })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({ open: false })\r\n        this.setState({ mode: null })\r\n    }\r\n    handleGetPatientResponse = () => {\r\n       \r\n    }\r\n    handleGetPatient = (id) => {\r\n\r\n        \r\n        this.props.getPatient(id)\r\n        this.setState({ open: true })\r\n        this.setState({ mode: 'update' })\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { open, mode } = this.state\r\n        const { patientlist } = this.props\r\n\r\n        var tableCols = [{ title: 'ID', field: 'id', width: 50 },\r\n        { title: 'Name', field: 'name' },\r\n        { title: 'Date Of Birth', field: 'dateOfBirth' },\r\n        { title: 'Last Entry', field: 'lastEntry' },\r\n        { title: 'Meta Data Count', field: 'metaDataCount' }]\r\n        return (\r\n            <Dashboard>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} md={12} lg={12}>\r\n                        <AddNewForm open={open} onClose={this.handleClose} type=\"patient\" mode={mode} />\r\n                        {/*<ReactTable data={patientList} cols={cols} />*/\r\n                        }\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            startIcon={<PlusIcon />}\r\n                            onClick={() => this.addNew(\"patient\")}\r\n                            size=\"small\"\r\n                            style={{ position: 'absolute', right: 0, top: 75 }}\r\n                        >\r\n                            New Patient\r\n                        </Button>\r\n                        <PaginationTools />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={12} lg={12}>\r\n                        {Object.keys(patientlist).length > 0\r\n                        ? <Table cols={tableCols} data={patientlist.result} actions={true} getReport={(id) => this.getReport(id)} handlegetpatient={(id) => this.handleGetPatient(id)} />\r\n                            : <Loader\r\n                                style={{ marginTop: 50 }}\r\n                                type=\"Bars\"\r\n                                color=\"#00BFFF\"\r\n                                height={50}\r\n                                width={50}\r\n                                timeout={0} //3 secs\r\n\r\n                            />}\r\n                    </Grid>\r\n                </Grid>\r\n                </Dashboard>\r\n            )\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    patientlist: state.patient.patientList\r\n})\r\n\r\n\r\nexport default (connect(mapStateToProps, { loadPatients, getPatient })(Patient));","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function Title(props) {\r\n  return (\r\n      <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom style={{ textTransform: 'capitalize' }}>\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTitle.propTypes = {\r\n  children: PropTypes.node,\r\n};","import React, { useEffect } from 'react';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { getMetaStatistics } from '../../actions/Actions'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { connect } from \"react-redux\"\r\nimport Loader from 'react-loader-spinner'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Title from '../dashboard/Title';\r\nimport Dashboard from '../dashboard/Dashboard';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\n function MetaStatistics(props)  {\r\n    const classes = useStyles();\r\n    const { metaStatistics} = props\r\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n    \r\n    useEffect(() => {\r\n        props.getMetaStatistics()\r\n    }, []);\r\n     if (metaStatistics != null) {\r\n         return (\r\n             <Dashboard>\r\n             <Grid container justify=\"center\">\r\n\r\n                 \r\n                 {Object.entries(metaStatistics).map(([key, value]) =>\r\n                     typeof (value) != 'object' || value === null ?\r\n            \r\n                         <Grid item xs={12} md={4} lg={4} key={key}>\r\n                              <Paper className={fixedHeightPaper}>\r\n                                 <Title >{key.replace(/([a-z])([A-Z])/g, '$1 $2')}</Title>\r\n                                 <Typography component=\"p\" variant=\"h4\">\r\n                                        {value}\r\n                                 </Typography>\r\n                              </Paper>\r\n                         </Grid>\r\n                                     :\r\n                         <Grid item xs={12} md={3} lg={3} key={key}>\r\n                             <Paper className={fixedHeightPaper}>\r\n                                 <Title >{key.replace(/([a-z])([A-Z])/g, '$1 $2')}</Title>\r\n                                     {value.map((value, i) => (<Typography component=\"p\" variant=\"h4\">{value.key}</Typography>))}\r\n                             </Paper>\r\n                         </Grid>\r\n                             )}\r\n\r\n                 </Grid>\r\n             </Dashboard>\r\n         )\r\n     }\r\n     else {\r\n         return (<Dashboard><Loader\r\n             style={{ marginTop: 50 }}\r\n             type=\"Bars\"\r\n             color=\"#00BFFF\"\r\n             height={50}\r\n             width={50}\r\n             timeout={0} //3 secs\r\n\r\n         /></Dashboard>)\r\n     }\r\n    \r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    metaStatistics: state.patient.metaStatistics\r\n})\r\n\r\n\r\nexport default (connect(mapStateToProps, { getMetaStatistics })(MetaStatistics));\r\n","import React from 'react';\nimport './App.css';\nimport SignIn from \"./components/auth/SignIn\";\n\nimport AuthStore from \"./components/auth/AuthStore\";\nimport Report from \"./components/report/Report\"\nimport Records from './components/record/Records'\nimport Patient from './components/patient/Patient'\nimport MetaReport from \"./components/metaData/MetaReport\"\nimport { createBrowserHistory } from 'history';\nimport { Route,Router, Switch, Redirect } from \"react-router-dom\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n    return (\n        <Route\n            {...rest}\n            render={(props) => AuthStore.isLoggedIn()\n                ? <Component {...props} />\n                : <Redirect to={{ pathname: '/login' }} />} />\n    );\n}\n\n\nfunction App() {\n   \n  return (\n      <div className=\"App\">\n            <div className='h-100'>\n              <Switch>\n                      <Route path=\"/login\" component={SignIn} /> \n\n                      <PrivateRoute exact path=\"/report/:id\" component={Report} />\n                      <PrivateRoute exact path=\"/meta_report\" component={MetaReport} />\n                      <PrivateRoute exact path=\"/records\" component={Records} />\n                      <PrivateRoute exact path=\"/\" component={Patient} />\n                 \n              </Switch>\n            </div>\n    </div>\n  );\n}\n\nexport default App;\n","import {\r\n    UPDATE_SAMPLE_DATA,\r\n    FETCH_PATIENT_DATA,\r\n    FETCH_RECORD_DATA,\r\n    EDIT_SINGLE_PATIENT,\r\n    UPDATE_RECORD_LIST,\r\n    FETCH_PATIENT_REPORT,\r\n    FETCH_META_STATISTICS\r\n} from '../actions/type';\r\n\r\nconst initialState = {\r\n    proxyList: [],\r\n    test_info: null,\r\n    patientList: {},\r\n    singlePatient: {},\r\n    recordList: [],\r\n    report: null,\r\n    metaStatistics:null\r\n};\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_SAMPLE_DATA:\r\n            return {\r\n                ...state,\r\n                proxyList: action.payload\r\n            };\r\n        case FETCH_PATIENT_DATA:\r\n            return {\r\n                ...state,\r\n                patientList:action.payload\r\n            }\r\n        case EDIT_SINGLE_PATIENT:\r\n            console.log(action.payload)\r\n            return {\r\n                ...state,\r\n                singlePatient: action.payload\r\n            }\r\n        case FETCH_RECORD_DATA:\r\n            return {\r\n                ...state,\r\n                recordList:action.payload\r\n            }\r\n        case UPDATE_RECORD_LIST:\r\n            return {\r\n                ...state,\r\n                recordList: state.recordList.concat(action.payload)\r\n            }\r\n        case FETCH_PATIENT_REPORT:\r\n            return {\r\n                ...state,\r\n                report:action.payload\r\n            }\r\n        case FETCH_META_STATISTICS:\r\n            return {\r\n                ...state,\r\n                metaStatistics: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","\nimport { combineReducers } from 'redux';\nimport patient from './patient'\nexport default combineReducers({\n    patient\n});\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport Reducer from './reducers/index';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\r\n\r\nconst initialState = {};\r\nconst store = createStore(Reducer, initialState, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from \"react-router-dom\"\nimport {Provider} from \"react-redux\"\nimport store from \"./store\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n    <App />\n    </Router>\n    </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}